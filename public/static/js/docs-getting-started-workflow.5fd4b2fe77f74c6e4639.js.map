{"version":3,"sources":["webpack:///./components/Hint.jsx","webpack:///./docs/getting-started/workflow.mdx"],"names":["Container","styled","div","_templateObject","_ref","variant","Hint","_ref3","children","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","_components_Hint__WEBPACK_IMPORTED_MODULE_2__","href","parentName","className","MediaQuery"],"mappings":"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","file":"static/js/docs-getting-started-workflow.c203ecc9.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst getBgColor = ({ variant }) => {\n  switch (variant) {\n    case 'success':\n      return 'rgb(245, 247, 249)'\n      break\n    default:\n      return 'rgb(245, 247, 249);'\n  }\n}\n\nconst getBorderColor = ({ variant }) => {\n  switch (variant) {\n    case 'success':\n      return 'rgb(38, 203, 124)'\n      break\n    default:\n      return 'rgb(56, 132, 255)'\n  }\n}\n\nconst Container = styled.div`\n  margin: 2rem 0;\n  padding: 1rem;\n  background-color: ${getBgColor};\n  border: 0;\n  border-style: solid;\n  border-color: rgb(56, 132, 255);\n  border-left-width: 3px;\n  border-radius: 3px;\n`\n\nconst Hint = ({ variant, children }) => (\n  <Container variant={variant}>{children}</Container>\n)\n\nexport default Hint\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import Hint from '@components/Hint'\n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"workflow\"}}>{`Workflow`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Atomic layout is based on CSS Grid. Please make yourself comfortable at that topic to eliminate most of the questions and make your experience superb. You don't have to be an expert, but having a basic knowledge on how CSS Grid works will help you to get more from Atomic layout.`}</MDXTag>\n<Hint>\n  We recommend reading through the{' '}\n  <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid\">\n    Complete guide to Grid\n  </a>\n  .\n</Hint>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"declarative-ui\"}}>{`Declarative UI`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The biggest difference when working with Atomic layout is that you declare what your layout suppose to look like, without explicitly telling how that must be achieved.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"creating-a-composition\"}}>{`Creating a composition`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"import\"}}>{`Import`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Start from importing a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Composition`}</MDXTag>{` component from the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`atomic-layout`}</MDXTag>{` package:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`// ES6+\nimport { Composition } from 'atomic-layout'\n\n// CommonJS\nconst Composition = require('atomic-layout').Composition\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"define-layout-areas\"}}>{`Define layout areas`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The next step is to think of what layout areas current composition acquires.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`import React from 'react'\nimport { Composition } from 'atomic-layout'\n\n// grid areas on mobile devices\nconst templateMobile = \\`\n  header\n  content\n  footer\n\\`\n\n// grid areas on tablets\nconst templateTablet = \\`\n  header header\n  content aside\n  footer footer\n\\`\n`}</MDXTag></MDXTag>\n<Hint>\n  Use <code>grid-template-areas</code> syntax when declaring grid areas. Notice\n  the explicit single quotes wrapping each line.\n</Hint>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"configure-composition\"}}>{`Configure `}<MDXTag name=\"inlineCode\" components={components} parentName=\"h3\">{`Composition`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Areas declaration alone will not do anything, we need to pass those areas as a value of the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`template`}</MDXTag>{` prop of our `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Composition`}</MDXTag>{` component:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`import React from 'react'\nimport { Composition } from 'atomic-layout'\n\n// grid areas on mobile devices\nconst templateMobile = \\`\n  header\n  content\n  footer\n\\`\n\n// grid areas on tablets\nconst templateTablet = \\`\n  header header\n  content aside\n  footer footer\n\\`\n\nconst Page = () => (\n  <Composition\n    template={templateMobile}\n    templateMd={templateTablet}>\n    {() => (/* See next step */)}\n  </Composition>\n)\n\nexport default Page\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Notice how we appended an `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`md`}</MDXTag>{` suffix in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`templateMd`}</MDXTag>{`. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`md`}</MDXTag>{` there refers to a breakpoint name, and having it as a suffix if any prop giving to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Composition`}</MDXTag>{` tells it to apply the value at that breakpoint. That is a feature called `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"../../fundamentals/responsive-props.md\"}}>{`Responsive props`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"render-layout-areas\"}}>{`Render layout areas`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Composition`}</MDXTag>{` component expects a function as its children. That function exposes areas components based on the given `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`template`}</MDXTag>{` values.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-jsx\"}}>{`import React from 'react'\nimport { Composition } from 'atomic-layout'\n\n// grid areas on mobile devices\nconst templateMobile = \\`\n  header\n  content\n  footer\n\\`\n\n// grid areas on tablets\nconst templateTablet = \\`\n  header header\n  content aside\n  footer footer\n\\`\n\nconst Page = () => (\n  <Composition template={templateMobile} templateMd={templateTablet}>\n    {({ Header, Content, Aside, Footer }) => (\n      <>\n        <Header>Header</Header>\n        <Content>Content</Content>\n        <Aside>Aside</Aside>\n        <Footer>Footer</Footer>\n      </>\n    )}\n  </Composition>\n)\n\nexport default Page\n`}</MDXTag></MDXTag>\n<Hint>\n  Notice that the Aside area exists only in templateTablet declaration. Atomic\n  layout will automatically wrap it in a proper `<MediaQuery />` component to\n  prevent it from rendering on mobile devices. **Responsive grid areas are\n  built-in**.\n</Hint>\n<MDXTag name=\"p\" components={components}>{`That's it. We have created a layout composition for our `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Page`}</MDXTag>{` component, that consist of four layout areas. No we can render another compositions inside those layout areas, thus making a `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"../../components/composition.md#nested-composition\"}}>{`Nested composition`}</MDXTag>{`. The latter is a main distinctive key of Atomic layout, which allows to create immersive layouts following the same pattern.`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}